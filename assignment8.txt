/Users/kevinzielinski/PycharmProjects/pythonProject/venv/bin/python /Users/kevinzielinski/PycharmProjects/pythonProject/assignment8.py
Binary Search:
f(n) = f(n/2) + 2
Solution with a = 1 b = 2 c = 0 is f(n) = Θ(n^0 log(n))

Big Integer Multiplication:
f(n) = 4f(n/2) + O(n)
Solution with a = 4 b = 2 c = 1 is f(n) = Θ(n^(log_2 4))

Fast Addition of Integers:
f(n) = 3f(n/2) + O(n)
Solution with a = 3 b = 2 c = 1 is f(n) = Θ(n^(log_2 3))

Merge Sort:
f(n) = 2f(n/2) + O(n)
Solution with a = 2 b = 2 c = 1 is f(n) = Θ(n^1 log(n))

Matrix Multiplication:
f(n) = 8f(n/2) + O(n^2)
Solution with a = 8 b = 2 c = 2 is f(n) = Θ(n^(log_2 8))

Fast Matrix Multiplication:
f(n) = 7f(n/2) + O(n^2)
Solution with a = 7 b = 2 c = 2 is f(n) = Θ(n^(log_2 7))

+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| No.  |           Description            |         Formula         |                          Function Code                          |  n  |   F(n)    |
+======+==================================+=========================+=================================================================+=====+===========+
| f9   | Linear Search                    | f(n) = f(n-1) + 1       | 1 if n == 1 else ff(f, n - 1) + 1                               |  64 |        64 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f2   | Binary Search                    | f(n) = f(n/2) + 1       | 1 if n == 1 else 1 * ff(f, n / 2) + 1                           |  64 |         7 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f8   | Bubble Sort                      | f(n) = f(n-1) + n-1     | 0 if n == 1 else ff(f, n - 1) + n - 1                           |  64 |      2016 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f1   | Merge Sort                       | f(n) = 2*f(n/2) + n     | 0 if n == 1 else 2 * ff(f, n / 2) + n                           |  64 |       384 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f10  | Stooge Sort                      | f(n) = 3f(2n/3)         | 0 if n == 1 else 3 * ff(f, int(2 * n / 3)) + 1                  |  64 |      9841 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f4   | Long Integer Multiplication      | f(n) = 4f(n/2) + O(n)   | 0 if n == 1 else 4 * ff(f, n / 2) + n                           |  64 |      4032 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f5   | Fast Long Integer Multiplication | f(n) = 3f(n/2) + O(n)   | 0 if n == 1 else 3 * ff(f, n / 2) + n                           |  64 |      1330 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f6   | Matrix Multiplication            | f(n) = 8f(n/2) + O(n^2) | 0 if n == 1 else 8 * ff(f, n / 2) + n ** 2                      |  64 |    258048 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f7   | Fast Matrix Multiplication       | f(n) = 7f(n/2) + O(n^2) | 0 if n == 1 else 7 * ff(f, n / 2) + n ** 2                      |  64 |    151404 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f3   | Fibonacci                        | f(n) = f(n-1) + f(n-2)  | 0 if n == 0 else (1 if n == 1 else ff(f, n - 1) + ff(f, n - 2)) |  64 | 1.061e+13 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f9   | Linear Search                    | f(n) = f(n-1) + 1       | 1 if n == 1 else ff(f, n - 1) + 1                               | 256 |       256 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f2   | Binary Search                    | f(n) = f(n/2) + 1       | 1 if n == 1 else 1 * ff(f, n / 2) + 1                           | 256 |         9 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f8   | Bubble Sort                      | f(n) = f(n-1) + n-1     | 0 if n == 1 else ff(f, n - 1) + n - 1                           | 256 |     32640 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f1   | Merge Sort                       | f(n) = 2*f(n/2) + n     | 0 if n == 1 else 2 * ff(f, n / 2) + n                           | 256 |      2048 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f10  | Stooge Sort                      | f(n) = 3f(2n/3)         | 0 if n == 1 else 3 * ff(f, int(2 * n / 3)) + 1                  | 256 |    265720 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f4   | Long Integer Multiplication      | f(n) = 4f(n/2) + O(n)   | 0 if n == 1 else 4 * ff(f, n / 2) + n                           | 256 |     65280 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f5   | Fast Long Integer Multiplication | f(n) = 3f(n/2) + O(n)   | 0 if n == 1 else 3 * ff(f, n / 2) + n                           | 256 |     12610 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f6   | Matrix Multiplication            | f(n) = 8f(n/2) + O(n^2) | 0 if n == 1 else 8 * ff(f, n / 2) + n ** 2                      | 256 |  16711680 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f7   | Fast Matrix Multiplication       | f(n) = 7f(n/2) + O(n^2) | 0 if n == 1 else 7 * ff(f, n / 2) + n ** 2                      | 256 |   7599020 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+
| f3   | Fibonacci                        | f(n) = f(n-1) + f(n-2)  | 0 if n == 0 else (1 if n == 1 else ff(f, n - 1) + ff(f, n - 2)) | 256 | 1.417e+53 |
+------+----------------------------------+-------------------------+-----------------------------------------------------------------+-----+-----------+

Process finished with exit code 0